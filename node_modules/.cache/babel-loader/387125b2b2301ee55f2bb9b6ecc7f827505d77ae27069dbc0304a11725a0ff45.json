{"ast":null,"code":"import{useState}from'react';import{cacheService}from'./cache';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:3000';export const useVideoData=()=>{const[data,setData]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const fetchData=async videoId=>{try{// Check cache first\nconst cachedData=cacheService.get(videoId);if(cachedData){setData(cachedData);return;}setLoading(true);setError(null);const response=await fetch(`${API_URL}/analyze-video`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({videoUrl:`https://www.youtube.com/watch?v=${videoId}`})});// Handle various error responses\nif(!response.ok){// Check specifically for throttling error (HTTP 429)\nif(response.status===429||response.statusText.includes('throttle')){throw new Error('Server is busy. Railway free tier has request limits. Please try again in a few minutes.');}// Try to parse the error response\nlet errorMessage='Failed to fetch video data';try{const errorData=await response.json();errorMessage=errorData.error||errorMessage;}catch(e){// If we can't parse JSON, use the status text\nerrorMessage=response.statusText||errorMessage;}throw new Error(errorMessage);}const result=await response.json();// Cache the result\ncacheService.set(videoId,result);setData(result);}catch(err){// Check if it's a network error\nif(err instanceof TypeError&&err.message.includes('network')){setError('Network error: Please check your internet connection');}else if(err instanceof Error&&err.message.includes('throttle')){// Handle throttling errors from Railway\nsetError('Service is currently at capacity (Railway free tier limits). Please try again in a few minutes.');}else{// Handle other errors\nsetError(err instanceof Error?err.message:'An unexpected error occurred');}setData(null);}finally{setLoading(false);}};return{data,loading,error,fetchData};};","map":{"version":3,"names":["useState","cacheService","API_URL","process","env","REACT_APP_API_URL","useVideoData","data","setData","loading","setLoading","error","setError","fetchData","videoId","cachedData","get","response","fetch","method","headers","body","JSON","stringify","videoUrl","ok","status","statusText","includes","Error","errorMessage","errorData","json","e","result","set","err","TypeError","message"],"sources":["C:/Users/ADAM/YT-adskip/YT-adskip-extension/src/utils/useVideoData.ts"],"sourcesContent":["import { useState } from 'react';\r\nimport { cacheService } from './cache';\r\n\r\ninterface TranscriptSegment {\r\n  text: string;\r\n  offset: number;\r\n}\r\n\r\nexport interface AdSegment {\r\n  start: number;\r\n  end: number;\r\n  text: string;\r\n}\r\n\r\nexport interface VideoData {\r\n  transcript: TranscriptSegment[];\r\n  adSegments: AdSegment[];\r\n}\r\n\r\ninterface UseVideoDataReturn {\r\n  data: VideoData | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchData: (videoId: string) => Promise<void>;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n\r\nexport const useVideoData = (): UseVideoDataReturn => {\r\n  const [data, setData] = useState<VideoData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchData = async (videoId: string) => {\r\n    try {\r\n      // Check cache first\r\n      const cachedData = cacheService.get(videoId);\r\n      if (cachedData) {\r\n        setData(cachedData);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch(`${API_URL}/analyze-video`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          videoUrl: `https://www.youtube.com/watch?v=${videoId}`,\r\n        }),\r\n      });\r\n\r\n      // Handle various error responses\r\n      if (!response.ok) {\r\n        // Check specifically for throttling error (HTTP 429)\r\n        if (response.status === 429 || response.statusText.includes('throttle')) {\r\n          throw new Error('Server is busy. Railway free tier has request limits. Please try again in a few minutes.');\r\n        }\r\n        \r\n        // Try to parse the error response\r\n        let errorMessage = 'Failed to fetch video data';\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.error || errorMessage;\r\n        } catch (e) {\r\n          // If we can't parse JSON, use the status text\r\n          errorMessage = response.statusText || errorMessage;\r\n        }\r\n        \r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      // Cache the result\r\n      cacheService.set(videoId, result);\r\n      setData(result);\r\n    } catch (err) {\r\n      // Check if it's a network error\r\n      if (err instanceof TypeError && err.message.includes('network')) {\r\n        setError('Network error: Please check your internet connection');\r\n      } else if (err instanceof Error && err.message.includes('throttle')) {\r\n        // Handle throttling errors from Railway\r\n        setError('Service is currently at capacity (Railway free tier limits). Please try again in a few minutes.');\r\n      } else {\r\n        // Handle other errors\r\n        setError(err instanceof Error ? err.message : 'An unexpected error occurred');\r\n      }\r\n      setData(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    fetchData,\r\n  };\r\n}; "],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,YAAY,KAAQ,SAAS,CAyBtC,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAExE,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAA0B,CACpD,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAmB,IAAI,CAAC,CACxD,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAgB,IAAI,CAAC,CAEvD,KAAM,CAAAa,SAAS,CAAG,KAAO,CAAAC,OAAe,EAAK,CAC3C,GAAI,CACF;AACA,KAAM,CAAAC,UAAU,CAAGd,YAAY,CAACe,GAAG,CAACF,OAAO,CAAC,CAC5C,GAAIC,UAAU,CAAE,CACdP,OAAO,CAACO,UAAU,CAAC,CACnB,OACF,CAEAL,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGhB,OAAO,gBAAgB,CAAE,CACvDiB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,QAAQ,CAAE,mCAAmCV,OAAO,EACtD,CAAC,CACH,CAAC,CAAC,CAEF;AACA,GAAI,CAACG,QAAQ,CAACQ,EAAE,CAAE,CAChB;AACA,GAAIR,QAAQ,CAACS,MAAM,GAAK,GAAG,EAAIT,QAAQ,CAACU,UAAU,CAACC,QAAQ,CAAC,UAAU,CAAC,CAAE,CACvE,KAAM,IAAI,CAAAC,KAAK,CAAC,0FAA0F,CAAC,CAC7G,CAEA;AACA,GAAI,CAAAC,YAAY,CAAG,4BAA4B,CAC/C,GAAI,CACF,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACe,IAAI,CAAC,CAAC,CACvCF,YAAY,CAAGC,SAAS,CAACpB,KAAK,EAAImB,YAAY,CAChD,CAAE,MAAOG,CAAC,CAAE,CACV;AACAH,YAAY,CAAGb,QAAQ,CAACU,UAAU,EAAIG,YAAY,CACpD,CAEA,KAAM,IAAI,CAAAD,KAAK,CAACC,YAAY,CAAC,CAC/B,CAEA,KAAM,CAAAI,MAAM,CAAG,KAAM,CAAAjB,QAAQ,CAACe,IAAI,CAAC,CAAC,CAEpC;AACA/B,YAAY,CAACkC,GAAG,CAACrB,OAAO,CAAEoB,MAAM,CAAC,CACjC1B,OAAO,CAAC0B,MAAM,CAAC,CACjB,CAAE,MAAOE,GAAG,CAAE,CACZ;AACA,GAAIA,GAAG,WAAY,CAAAC,SAAS,EAAID,GAAG,CAACE,OAAO,CAACV,QAAQ,CAAC,SAAS,CAAC,CAAE,CAC/DhB,QAAQ,CAAC,sDAAsD,CAAC,CAClE,CAAC,IAAM,IAAIwB,GAAG,WAAY,CAAAP,KAAK,EAAIO,GAAG,CAACE,OAAO,CAACV,QAAQ,CAAC,UAAU,CAAC,CAAE,CACnE;AACAhB,QAAQ,CAAC,iGAAiG,CAAC,CAC7G,CAAC,IAAM,CACL;AACAA,QAAQ,CAACwB,GAAG,WAAY,CAAAP,KAAK,CAAGO,GAAG,CAACE,OAAO,CAAG,8BAA8B,CAAC,CAC/E,CACA9B,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,MAAO,CACLH,IAAI,CACJE,OAAO,CACPE,KAAK,CACLE,SACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}