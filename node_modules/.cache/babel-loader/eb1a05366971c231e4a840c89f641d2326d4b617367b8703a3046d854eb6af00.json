{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { cacheService } from './cache';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nexport const useVideoData = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchData = async videoId => {\n    try {\n      // Check cache first\n      const cachedData = cacheService.get(videoId);\n      if (cachedData) {\n        setData(cachedData);\n        return;\n      }\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/analyze-video`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoUrl: `https://www.youtube.com/watch?v=${videoId}`\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch video data');\n      }\n      const result = await response.json();\n\n      // Cache the result\n      cacheService.set(videoId, result);\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unexpected error occurred');\n      setData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    fetchData\n  };\n};\n_s(useVideoData, \"PF2na9M8UJ4bLzW1+Lbyf4L3N00=\");","map":{"version":3,"names":["useState","cacheService","API_URL","process","env","REACT_APP_API_URL","useVideoData","_s","data","setData","loading","setLoading","error","setError","fetchData","videoId","cachedData","get","response","fetch","method","headers","body","JSON","stringify","videoUrl","ok","errorData","json","Error","result","set","err","message"],"sources":["C:/Users/ADAM/YT-adskip/YT-adskip-extension/src/utils/useVideoData.ts"],"sourcesContent":["import { useState } from 'react';\nimport { cacheService } from './cache';\n\ninterface TranscriptSegment {\n  text: string;\n  offset: number;\n}\n\nexport interface AdSegment {\n  start: number;\n  end: number;\n  text: string;\n}\n\nexport interface VideoData {\n  transcript: TranscriptSegment[];\n  adSegments: AdSegment[];\n}\n\ninterface UseVideoDataReturn {\n  data: VideoData | null;\n  loading: boolean;\n  error: string | null;\n  fetchData: (videoId: string) => Promise<void>;\n}\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nexport const useVideoData = (): UseVideoDataReturn => {\n  const [data, setData] = useState<VideoData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = async (videoId: string) => {\n    try {\n      // Check cache first\n      const cachedData = cacheService.get(videoId);\n      if (cachedData) {\n        setData(cachedData);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch(`${API_URL}/analyze-video`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          videoUrl: `https://www.youtube.com/watch?v=${videoId}`,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch video data');\n      }\n\n      const result = await response.json();\n      \n      // Cache the result\n      cacheService.set(videoId, result);\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unexpected error occurred');\n      setData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    data,\n    loading,\n    error,\n    fetchData,\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,YAAY,QAAQ,SAAS;AAyBtC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAA0B;EAAAC,EAAA;EACpD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAmB,IAAI,CAAC;EACxD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMc,SAAS,GAAG,MAAOC,OAAe,IAAK;IAC3C,IAAI;MACF;MACA,MAAMC,UAAU,GAAGf,YAAY,CAACgB,GAAG,CAACF,OAAO,CAAC;MAC5C,IAAIC,UAAU,EAAE;QACdP,OAAO,CAACO,UAAU,CAAC;QACnB;MACF;MAEAL,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,gBAAgB,EAAE;QACvDkB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE,mCAAmCV,OAAO;QACtD,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACf,KAAK,IAAI,4BAA4B,CAAC;MAClE;MAEA,MAAMkB,MAAM,GAAG,MAAMZ,QAAQ,CAACU,IAAI,CAAC,CAAC;;MAEpC;MACA3B,YAAY,CAAC8B,GAAG,CAAChB,OAAO,EAAEe,MAAM,CAAC;MACjCrB,OAAO,CAACqB,MAAM,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZnB,QAAQ,CAACmB,GAAG,YAAYH,KAAK,GAAGG,GAAG,CAACC,OAAO,GAAG,8BAA8B,CAAC;MAC7ExB,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLH,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAnDWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}