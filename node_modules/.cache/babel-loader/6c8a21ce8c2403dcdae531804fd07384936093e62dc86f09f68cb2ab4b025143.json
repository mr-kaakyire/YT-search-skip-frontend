{"ast":null,"code":"const CACHE_PREFIX='yt-adskip-cache-';const CACHE_TTL=7*24*60*60*1000;// 7 days in milliseconds (increased from 24 hours)\nexport const cacheService={get:videoId=>{try{const cacheKey=CACHE_PREFIX+videoId;const cachedData=localStorage.getItem(cacheKey);if(!cachedData)return null;const entry=JSON.parse(cachedData);const now=Date.now();// Check if cache is expired\nif(now-entry.timestamp>CACHE_TTL){localStorage.removeItem(cacheKey);return null;}return entry.data;}catch(error){console.error('Cache read error:',error);return null;}},set:(videoId,data)=>{try{const cacheKey=CACHE_PREFIX+videoId;const entry={data,timestamp:Date.now(),videoId:videoId// Store video ID for easier management\n};localStorage.setItem(cacheKey,JSON.stringify(entry));}catch(error){console.error('Cache write error:',error);}},clear:videoId=>{try{const cacheKey=CACHE_PREFIX+videoId;localStorage.removeItem(cacheKey);}catch(error){console.error('Cache clear error:',error);}},// List all cached videos\nlistAll:()=>{try{const cacheEntries=[];// Iterate through localStorage\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);// Check if this is one of our cache entries\nif(key&&key.startsWith(CACHE_PREFIX)){try{const entry=JSON.parse(localStorage.getItem(key)||'');const videoId=key.replace(CACHE_PREFIX,'');cacheEntries.push({videoId:videoId,timestamp:entry.timestamp,hasAdSegments:entry.data.adSegments.length>0});}catch(e){// Skip invalid entries\nconsole.warn('Invalid cache entry found:',key);}}}// Sort by most recent first\nreturn cacheEntries.sort((a,b)=>b.timestamp-a.timestamp);}catch(error){console.error('Error listing cache:',error);return[];}},// Clear all cached data\nclearAll:()=>{try{// Find and remove only our cache entries\nconst keysToRemove=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith(CACHE_PREFIX)){keysToRemove.push(key);}}// Remove the keys in a separate loop to avoid index shifting issues\nkeysToRemove.forEach(key=>localStorage.removeItem(key));console.log(`Cleared ${keysToRemove.length} cached entries`);}catch(error){console.error('Error clearing cache:',error);}}};","map":{"version":3,"names":["CACHE_PREFIX","CACHE_TTL","cacheService","get","videoId","cacheKey","cachedData","localStorage","getItem","entry","JSON","parse","now","Date","timestamp","removeItem","data","error","console","set","setItem","stringify","clear","listAll","cacheEntries","i","length","key","startsWith","replace","push","hasAdSegments","adSegments","e","warn","sort","a","b","clearAll","keysToRemove","forEach","log"],"sources":["C:/Users/ADAM/YT-adskip/YT-adskip-extension/src/utils/cache.ts"],"sourcesContent":["import { VideoData } from './useVideoData';\n\nconst CACHE_PREFIX = 'yt-adskip-cache-';\nconst CACHE_TTL = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds (increased from 24 hours)\n\ninterface CacheEntry {\n  data: VideoData;\n  timestamp: number;\n  videoId: string; // Added for better identification\n}\n\nexport const cacheService = {\n  get: (videoId: string): VideoData | null => {\n    try {\n      const cacheKey = CACHE_PREFIX + videoId;\n      const cachedData = localStorage.getItem(cacheKey);\n      \n      if (!cachedData) return null;\n      \n      const entry: CacheEntry = JSON.parse(cachedData);\n      const now = Date.now();\n      \n      // Check if cache is expired\n      if (now - entry.timestamp > CACHE_TTL) {\n        localStorage.removeItem(cacheKey);\n        return null;\n      }\n      \n      return entry.data;\n    } catch (error) {\n      console.error('Cache read error:', error);\n      return null;\n    }\n  },\n  \n  set: (videoId: string, data: VideoData): void => {\n    try {\n      const cacheKey = CACHE_PREFIX + videoId;\n      const entry: CacheEntry = {\n        data,\n        timestamp: Date.now(),\n        videoId: videoId // Store video ID for easier management\n      };\n      \n      localStorage.setItem(cacheKey, JSON.stringify(entry));\n    } catch (error) {\n      console.error('Cache write error:', error);\n    }\n  },\n  \n  clear: (videoId: string): void => {\n    try {\n      const cacheKey = CACHE_PREFIX + videoId;\n      localStorage.removeItem(cacheKey);\n    } catch (error) {\n      console.error('Cache clear error:', error);\n    }\n  },\n  \n  // List all cached videos\n  listAll: (): { videoId: string; timestamp: number; hasAdSegments: boolean }[] => {\n    try {\n      const cacheEntries: { videoId: string; timestamp: number; hasAdSegments: boolean }[] = [];\n      \n      // Iterate through localStorage\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        \n        // Check if this is one of our cache entries\n        if (key && key.startsWith(CACHE_PREFIX)) {\n          try {\n            const entry: CacheEntry = JSON.parse(localStorage.getItem(key) || '');\n            const videoId = key.replace(CACHE_PREFIX, '');\n            \n            cacheEntries.push({\n              videoId: videoId,\n              timestamp: entry.timestamp,\n              hasAdSegments: entry.data.adSegments.length > 0\n            });\n          } catch (e) {\n            // Skip invalid entries\n            console.warn('Invalid cache entry found:', key);\n          }\n        }\n      }\n      \n      // Sort by most recent first\n      return cacheEntries.sort((a, b) => b.timestamp - a.timestamp);\n    } catch (error) {\n      console.error('Error listing cache:', error);\n      return [];\n    }\n  },\n  \n  // Clear all cached data\n  clearAll: (): void => {\n    try {\n      // Find and remove only our cache entries\n      const keysToRemove = [];\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(CACHE_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      // Remove the keys in a separate loop to avoid index shifting issues\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n      \n      console.log(`Cleared ${keysToRemove.length} cached entries`);\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}